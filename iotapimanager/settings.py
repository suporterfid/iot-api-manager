"""
Django settings for iotapimanager project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from pathlib import Path
from pythonjsonlogger import jsonlogger
from kombu import Exchange, Queue
from celery.schedules import crontab

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

SITE_NAME = 'Reader Manager'

MQTT_BROKER_URL = os.environ.get('MQTT_BROKER_URL', 'localhost')
MQTT_BROKER_PORT = int(os.environ.get('MQTT_BROKER_PORT', 1883))
MQTT_KEEPALIVE_INTERVAL = int(os.environ.get('MQTT_KEEPALIVE_INTERVAL', 60))
MQTT_USERNAME = os.environ.get('MQTT_USERNAME', '')
MQTT_PASSWORD = os.environ.get('MQTT_PASSWORD', '')
MQTT_USE_TLS = bool(int(os.environ.get('MQTT_USE_TLS', '0')))
MQTT_TLS_CA_CERTS = os.environ.get('MQTT_TLS_CA_CERTS', '')

# Use the environment variables to configure the database connection
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('POSTGRES_DB'),
        'USER': os.getenv('POSTGRES_USER'),
        'PASSWORD': os.getenv('POSTGRES_PASSWORD'),
        'HOST': 'db',  # This matches the service name in docker-compose.yml
        'PORT': '5432',
    }
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'json': {
            '()': 'pythonjsonlogger.jsonlogger.JsonFormatter',
        },
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(message)s',
        },
        'simple': {
            'format': '%(levelname)s %(message)s',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'logstash': {
            'class': 'logstash_async.handler.AsynchronousLogstashHandler',
            'host': 'logstash',  # Refers to the Logstash service in Docker Compose
            'port': 5044,
            'database_path': os.path.join(os.path.dirname(__file__), 'logstash.db'),
            'ssl_enable': False,
            'ssl_verify': False,
            'formatter': 'json',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'logstash'],
            'level': 'INFO',
            'propagate': True,
        },
        'iotapimanager': {
            'handlers': ['console', 'logstash'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-8gw&=e(wa%vxaye11h7mg2v1oaxee5ykw5kxh=a-urt$6j*0i)'

CELERY_BEAT_SCHEDULE = {
    'update-departure-time-every-minute': {
        'task': 'iotapimanager.tasks.process_departure_time',
        'schedule': crontab(minute='*'),  # Run every minute
    },
}

CELERY_BROKER_URL = 'amqp://user:password@rabbitmq:5672//'
CELERY_RESULT_BACKEND = 'rpc://'  
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'

CELERY_TASK_QUEUES = (
    Queue('default', Exchange('default'), routing_key='default'),
    Queue('webhook_queue', Exchange('webhook_exchange'), routing_key='webhook.#'),
    Queue('webhook_settings_queue', Exchange('webhook_settings_exchange'), routing_key='webhook_settings.#'),
    Queue('mqtt_settings_queue', Exchange('mqtt_settings_exchange'), routing_key='mqtt_settings.#'),
)

CELERY_TASK_DEFAULT_QUEUE = 'default'
CELERY_TASK_DEFAULT_EXCHANGE = 'default'
CELERY_TASK_DEFAULT_ROUTING_KEY = 'default'

# Routing configuration
CELERY_TASK_ROUTES = {
    'iotapimanager.tasks.process_webhook': {
        'queue': 'webhook_queue', 
        'routing_key': 'webhook.process',
        'exchange': 'webhook'
    },
    'iotapimanager.tasks.process_webhook_settings': {
        'queue': 'webhook_settings_queue', 
        'routing_key': 'webhook_settings.process',
        'exchange': 'webhook_settings'
    },
    'iotapimanager.tasks.process_mqtt_settings': {
        'queue': 'mqtt_settings_queue', 
        'routing_key': 'mqtt_settings.process',
        'exchange': 'mqtt_settings'
    },
}

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

#ALLOWED_HOSTS = []

# Ensure ALLOWED_HOSTS includes the Docker container's IP or hostname
ALLOWED_HOSTS = ['*']
#ALLOWED_HOSTS = ['0.0.0.0', 'localhost', 'yourdomain.com', 'www.yourdomain.com', 'api.yourdomain.com']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_celery_beat',
    'crispy_forms',
    'crispy_bootstrap5',
    'readers',
    'smartreader',

]

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CRISPY_TEMPLATE_PACK = 'bootstrap5'

ROOT_URLCONF = 'iotapimanager.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'iotapimanager.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
